#!/usr/bin/env ruby

require 'rbconfig'

def is_windows?
  is_windows = (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/)
end

def is_ruby_18?
  RUBY_VERSION[1,3] == "1.8"
end

require "socket"
require "pty" unless is_windows?
require "net/https"
require "uri"
require "optparse"
require 'fileutils'
if is_windows?
  require 'open3'
  require 'childprocess'
end
require 'shellwords'


API_BASE_URL="https://www.manymo.com/api/v1"
#API_BASE_URL="http://devwww.manymo.com/api/v1"
#API_BASE_URL="http://localhost:3000/api/v1"

# monkey patch childprocess to avoid unwanted quoting
if is_windows?
  class ChildProcess::Windows::ProcessBuilder
    def quote_if_necessary(str)
      str
    end
  end
end

def adb_path
  @options[:adb_path] || 'adb'
end

def check_for_adb
  if @options[:adb_path]
    if !File.exists?(@options[:adb_path])
      STDERR.puts "Specified ADB executable (#{@options[:adb_path]}) not found."
      exit 1
    end
  else
    found_adb = false
    begin
      `adb version`
      found_adb = true
    rescue Errno::ENOENT
    end
    if (!found_adb)
      STDERR.puts "Could not find adb. Please install the Android SDK and make sure its platform-tools directory is in your PATH."
      exit 1
    end
  end
end

def get_auth_token(force = false)
  manymo_config_dir = File.expand_path('~/.manymo')
  auth_token_path = manymo_config_dir + '/auth_token'
  if ! force and File.exists?(auth_token_path)
    return File.read(auth_token_path)
  else
    print "Please visit https://www.manymo.com/user/client_applications to get your authorization token. Enter it here: "
    STDOUT.flush
    auth_token = STDIN.gets.chomp
    if auth_token.empty?
      STDERR.puts "No token supplied. Exiting."
      exit 1
    else
      begin
        if !File.exists?(manymo_config_dir)
          FileUtils.mkdir(manymo_config_dir)
        end
        File.open(auth_token_path, "w") do |auth_token_path_file_handle|
          auth_token_path_file_handle.write(auth_token)
        end
      rescue Errno::EACCES
        STDERR.puts "Unable to store api token in #{auth_token_path}. You will be prompted again, next time this command is run."
      end
    end
    return auth_token
  end
end

def lockfile_for_port(port)
  File.expand_path("~/.manymo/.localhost_#{port}.lock")
end

def create_lockfile(port)
  # Raises Errno::EEXIST if lockfile cannot be created
  tunnel_lockfile = lockfile_for_port(port)
  if File.exists?(tunnel_lockfile) && (Time.new - File.mtime(tunnel_lockfile)) > 60
    File.unlink(tunnel_lockfile)
  end
  File.open(tunnel_lockfile, File::WRONLY|File::CREAT|File::EXCL) { |file| file.write $$ }
end

def remove_lockfile(port)
  begin
    File.unlink(lockfile_for_port(port))
  rescue Errno::ENOENT
  end
end

def find_available_local_emulator_port
  (5554...5754).step(2) do |local_port|
    created_lock = false
    begin
      create_lockfile(local_port)
      created_lock = true
      include Socket::Constants
      socket = Socket.new(AF_INET, SOCK_STREAM, 0)
      socket.bind(Socket.pack_sockaddr_in( local_port, '127.0.0.1' ))
      socket.close
      return local_port
    rescue Errno::EADDRINUSE, Errno::EEXIST
      remove_lockfile(local_port) if created_lock
    end
  end

  STDERR.puts "Could not establish tunnel.  All local ports between 5554 and 5754 are in use."
  exit(1)
end

def processes
  `ps ax -o pid,command`.split("\n").inject({}) do |all, one|
    one =~ /\s*(\d+)\s+(.*)/
    all[$2] = $1.to_i unless $1.nil? or $2.nil?
    all
  end    
end

def spawn(command)
  if is_windows?
    ChildProcess::Windows::Lib.set_handle_inheritance ChildProcess::Windows::Lib.handle_for(STDERR), false
    ChildProcess::Windows::Lib.set_handle_inheritance ChildProcess::Windows::Lib.handle_for(STDOUT), false
    r_stdout, w_stdout = IO.pipe
    ChildProcess::Windows::Lib.set_handle_inheritance ChildProcess::Windows::Lib.handle_for(w_stdout), false
    process = ChildProcess.build(command)
    process.io.stdout = process.io.stderr = w_stdout
    process.duplex    = true # sets up pipe so process.io.stdin will be available after .start
    process.detach
    process.start
    w_stdout.close
    [r_stdout, process.io.stdin, process.pid]
  else
    PTY.spawn(command)
  end
end

def expect(command, matches, options = {})
  select_timeout = options[:wait] || 30

  r_stdout, w_stdin, pid = spawn(command)

  #puts "pid = #{pid}, #{w_stdin.inspect}"

  output_buffer = ""
  finished = false
  timeout_proc = nil
  eof_proc = nil

  re_matches = matches.select {|m| m.first.is_a?(Regexp)}
  matches.each do |m| 
    if m.first == :timeout
      timeout_proc = m.last
    end
    if m.first == :eof
      eof_proc = m.last
    end
  end

  while !finished
    begin
      #puts "going to select on #{r_stdout.inspect}"
      ready_handles = IO.select([r_stdout], [], [], select_timeout)
      #puts "(#{pid}) Ready handles = #{ready_handles.inspect}"
      if ready_handles && ready_handles[0].include?(r_stdout)
        new_output = r_stdout.readpartial(4096)
        #puts "(#{pid}) stdout: #{new_output.inspect}"
        output_buffer += new_output
        re_matches.each do |re,proc|
          #puts "Comparing #{re.inspect} against #{output_buffer.inspect}"
          if (match = re.match(output_buffer))
            output_buffer = output_buffer[(match.offset(0).last)..-1]
            do_continue, new_timeout = proc.call(match, w_stdin)
            finished = true if !do_continue
            if new_timeout
              select_timeout = new_timeout
            end
          end
        end
      else
        if timeout_proc
          do_continue, new_timeout = timeout_proc.call
          finished = true if !do_continue
          if new_timeout
            select_timeout = new_timeout
          end
        end
      end
    rescue EOFError,Errno::EIO
      finished = true
      if eof_proc
        eof_proc.call
      end
    end
  end
  r_stdout.close
  w_stdin.close
  Process.detach(pid)
end

def start_tunnel(*args)
  is_windows? ? start_tunnel_windows(*args) : start_tunnel_unix(*args)
end

def start_tunnel_windows(worker_host, worker_port, password)
  worker_port = worker_port.to_i
  local_port = find_available_local_emulator_port
  manymo_dir = File.dirname(__FILE__)
  command = "#{manymo_dir}/plink.exe -N -L #{local_port}:localhost:#{worker_port} -L #{local_port+1}:localhost:#{worker_port+1} adb#{worker_port}@#{worker_host}"

  sent_password = false
  connected = false

  matches = [
    [:eof, lambda { 
      STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22 (EOF while reading output)."
      exit 1
      }],
    [:timeout, lambda {
      if sent_password
        connected = true
        false
      else
        STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22."
        STDERR.puts "Please check that your network is connected and that no firewall rules are blocking ssh requests."
        exit 1
      end
      }],
    [/Store key in cache\? \(y\/n\)/, lambda { |match_data, w_stdin|
      w_stdin.puts "y"
      true
      }],
    [/password: /, lambda { |match_data, w_stdin|
      if !sent_password
        w_stdin.print "#{password}\r\n"
        w_stdin.flush
        sent_password = true
        [true, 5] # update timeout
      else
        STDERR.puts "Invalid tunnel key."
        exit 1
      end
      }],
    [/Connection timed out/, lambda {|match_data, w_stdin|
      STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22."
      STDERR.puts "Please check that your network is connected and that no firewall rules are blocking ssh requests."
      exit 1
      false
      }]
  ]

  expect(command, matches, {:timeout => 30})

  local_port if connected
end

def start_tunnel_unix(worker_host, worker_port, password, silent = false) 
  begin
    worker_port = worker_port.to_i
    local_port = find_available_local_emulator_port
    command = "ssh -fN -o ExitOnForwardFailure\\ yes -o StrictHostKeyChecking\\ no -L#{local_port}:localhost:#{worker_port} -L#{local_port+1}:localhost:#{worker_port+1} adb#{worker_port}@#{worker_host}"

    sent_password = false
    connected = false

    matches = [
      [:eof, lambda { 
        if sent_password
          connected = true
          false
        else
          STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22 (EOF while reading output)."
          exit 1
        end
        }],
      [:timeout, lambda {
        if sent_password
          connected = true
          false
        else
          STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22."
          STDERR.puts "Please check that your network is connected and that no firewall rules are blocking ssh requests."
          exit 1
        end
        }],
      [/Store key in cache\? \(y\/n\)/, lambda { |match_data, w_stdin|
        w_stdin.puts "y"
        true
        }],
      [/Address already in use/, lambda {|match_data, w_stdin|
        STDERR.puts "Local port conflict: #{local_port} already in use."
        exit 1
        }],
      [/Permission denied/, lambda {|match_data, w_stdin|
        STDERR.puts "Invalid tunnel key."
        exit 1
        }],
      [/.*assword:/, lambda { |match_data, w_stdin|
        if sent_password
          STDERR.puts "Invalid tunnel key."
          exit 1
        end
        w_stdin.puts password
        sent_password = true
        [true, 5] # update timeout
        }],
      [/Connection timed out/, lambda {|match_data, w_stdin|
        STDERR.puts "Unable to establish SSH connection to #{worker_host} on port 22."
        STDERR.puts "Please check that your network is connected and that no firewall rules are blocking ssh requests."
        exit 1
        false
        }]
    ]

    expect(command, matches, {:timeout => 30})

  rescue PTY::ChildExited
    # Assume connected; haven't seen an instance where we get this exception and ssh fails
    connected = true
  end
  local_port if connected
end

def is_device_listed?(console_port)
  devices_output = `#{adb_path.shellescape} devices`
  devices_output.match(/emulator-#{console_port}/)
end

def tunnel(worker_host, worker_port, password, silent = false)

  local_port = start_tunnel(worker_host, worker_port, password)

  if local_port
    remove_lockfile(local_port)

    # This will start adb server if it isn't started
    listed = is_device_listed?(local_port)

    if !listed
      s = TCPSocket.open('localhost', 5037)
      s.puts("0012host:emulator:#{local_port+1}")
      # Check again
      listed = is_device_listed?(local_port)
    end

    if listed
      puts "Tunnel established; local serial number is: emulator:#{local_port}" unless silent
    else
      STDERR.puts "Could not get status of emulator.  Please check adb devices for emulator status."
      exit 1
    end

    return local_port
  end
  nil
end

def get(endpoint)
  auth_token = get_auth_token
  #puts "Auth token: #{auth_token}"
  uri = URI.parse(API_BASE_URL + endpoint)
  http = Net::HTTP.new(uri.host, uri.port)
  http.verify_mode = OpenSSL::SSL::VERIFY_NONE
  if uri.scheme == 'https'
    http.use_ssl = true
  end
  
  request = Net::HTTP::Get.new(uri.request_uri)
  request["Authorization"] = "OAuth token=#{auth_token}"
  request["Accept"] = "text/plain"
  
  begin
    response = http.request(request)
    if response.code.to_i / 100 == 2
      response.body
    elsif response.code.to_i == 401
      puts "Invalid authorization token."
      get_auth_token(true)
      get(endpoint)
    else
      STDERR.puts "Error #{response.code}: #{response.body}"
      exit 1
    end
  rescue SystemExit
    exit 1
  rescue Exception
    STDERR.puts "Error: #{$!}"
    STDERR.puts "Please check that your network is connected and that no firewall rules are blocking #{uri.scheme} requests."
    exit 1
  end    
end

def list_emulators  
  puts get("/emulators")
end

def launch(name)
  hostname, emulator_console_port, password = get("/emulators/launch_emulator/#{name}").split(":")
  #puts "Tunnel is #{hostname}:#{emulator_console_port}:#{password}"
  local_port = tunnel(hostname, emulator_console_port, password, true)
  puts "Emulator launched; local serial number is: localhost:#{local_port + 1}"    
end

def shutdown(arg)
  matches = []

  if is_windows?
    output = `wmic process where (name="plink.exe") get Commandline,ProcessId /FORMAT:CSV`.split("\n\n")
    output.each do |line|
      node, commandline, pid = line.split(",")
      if commandline && commandline.match(/-L (\d{4}):localhost:(\d{4}) -L (\d{4}):localhost:(\d{4}) adb(\d{4})@(.*\.manymo\.com)/)
        matches << [pid.to_i, "localhost:#{$3}", $6, $5]
      end
    end
  else
    processes.inject({}) do |all, (command, pid)| 
      if command.match(/-L(\d{4}):localhost:(\d{4}) -L(\d{4}):localhost:(\d{4}) adb(\d{4})@(.*\.manymo\.com)/)
        matches << [pid.to_i, "localhost:#{$3}", $6, $5]
      end
    end
  end

  killed = []
  matches.each do |pid, name, hostname, remote_port|
    if arg.nil? || name == arg
      begin
        #puts "Killing #{pid.inspect}"
        Process.kill('KILL', pid)
        get("/emulators/shutdown_emulator?hostname=#{hostname}&remote_port=#{remote_port}")
        killed << name
      rescue Errno::ESRCH
        STDERR.puts "Can't kill process: not found"
        exit 1
      rescue Errno::EPERM
        STDERR.puts "Can't kill process: permission denied"
        exit 1
      end
    end
  end
  
  if killed.empty?
    if arg.nil?
      STDERR.puts "No tunnels found."            
    else
      STDERR.puts "No matching tunnel found."      
    end
    exit 1
  else
    puts "Shutdown: #{killed.join(", ")}"
  end
end


@options = {}
@parser = OptionParser.new do |opts|
  opts.banner = <<EOT
manymo - Manymo Command Line Tool

Full documentation at https://www.manymo.com/pages/documentation/manymo-command-line-tool
 
Usage:

manymo [options] COMMAND [ARGUMENTS]

Commands:
        launch EMULATORNAME          Launch a headless emulator and make it appear like a local device
        list                         List emulators; use the name attribute with the launch command
        shutdown [SERIALNUMBER]      Shutdown specified headless emulator or tunnel, or all if serial number omitted 
        token                        Display a prompt to enter authorization token
        tunnel TUNNELKEY             Make an in-browser emulator appear like a local device

Options:
EOT

  opts.on("--adb-path PATH_TO_ADB", "Specify path to adb executable; otherwise uses the one in your path") do |v|
    @options[:adb_path] = v
  end
end

def usage
  puts "#{@parser.banner}#{@parser.summarize.join("\n")}"
end

begin
  @parser.parse!
rescue
  usage
  exit
end


command = ARGV[0]
check_for_adb

case command
when /token/
  get_auth_token(true)
when /tunnel/
  args = ARGV[1].split(':')
  if args.count == 3
    tunnel(*args)
  else
    usage
  end
when /list/
  list_emulators
when /launch/
  if ARGV[1]
    launch(ARGV[1])
  else
    usage
  end
when /shutdown/
  shutdown(ARGV[1])
else
  usage
end
