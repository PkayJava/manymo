#!/usr/bin/env ruby

require 'rbconfig'

def is_windows?
  is_windows = (RbConfig::CONFIG['host_os'] =~ /mswin|mingw|cygwin/)
end

def is_ruby_18?
  RUBY_VERSION[1,3] == "1.8"
end

require "pty" unless is_windows?
require "optparse"
require 'fileutils'


def list_emulators  
  puts get("/emulators")
end

def launch(name)
  hostname, emulator_console_port, password = get("/emulators/launch_emulator/#{name}").split(":")
  #puts "Tunnel is #{hostname}:#{emulator_console_port}:#{password}"
  local_port = tunnel(hostname, emulator_console_port, password, true)
  puts "Emulator launched; local serial number is: localhost:#{local_port + 1}"    
end

@options = {}
@parser = OptionParser.new do |opts|
  opts.banner = <<EOT
manymo - Manymo Command Line Tool (Version #{CLIENT_VERSION})

Full documentation at https://www.manymo.com/pages/documentation/manymo-command-line-tool
 
Usage:

manymo [options] COMMAND [ARGUMENTS]

Commands:
        launch EMULATORNAME          Launch a headless emulator and make it appear like a local device
        list                         List emulators; use the name attribute with the launch command
        shutdown [SERIALNUMBER]      Shutdown specified headless emulator or tunnel, or all if serial number omitted 
        token                        Display a prompt to enter authorization token
        tunnel TUNNELKEY             Make an in-browser emulator appear like a local device

Options:
EOT

  opts.on("--adb-path PATH_TO_ADB", "Specify path to adb executable; otherwise uses the one in your path") do |v|
    @options[:adb_path] = v
  end
end

def usage
  puts "#{@parser.banner}#{@parser.summarize.join("\n")}"
end

begin
  @parser.parse!
rescue
  usage
  exit
end


command = ARGV[0]
check_for_adb

case command
when /token/
  get_auth_token(true)
when /tunnel/
  args = ARGV[1].split(':')
  if args.count == 3
    tunnel(*args)
  else
    usage
  end
when /list/
  list_emulators
when /launch/
  if ARGV[1]
    launch(ARGV[1])
  else
    usage
  end
when /shutdown/
  shutdown(ARGV[1])
when /version/
  puts "Version #{CLIENT_VERSION}"
else
  usage
end
